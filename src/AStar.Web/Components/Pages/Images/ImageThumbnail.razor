@using AStar.Web.ApiClients
@inject AStar.Web.ApiClients.ImagesApiClient ImagesApiClient

@if (@imageSource.Length > 0)
{
    <img id="@ImageName" src="@imageSource" alt="@ImageName"/>
}
else
{
    <span>
        Loading...please wait...
        <img src="assets/loading-gif-orange-8.gif" alt="Loading...please wait..." width="25" height="25" />
    </span>
}
@code {
    private string imageSource = string.Empty;

    [Parameter]
    public string ImageName { get; set; } = string.Empty;

    [Parameter]
    public string ImageFullName { get; set; } = string.Empty;

    [Parameter]
    public int ThumbnailSize { get; set; } = 150;

    [Parameter]
    public EventCallback<bool> OnDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var thumbnail = await ImagesApiClient.GetImageAsync(ImageFullName, ThumbnailSize);

        imageSource = await PopulateImageFromStream(thumbnail);
    }

    private async Task<string> PopulateImageFromStream(Stream stream)
    {
        var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var b64String = Convert.ToBase64String(ms.ToArray());
        await stream.DisposeAsync();

        if (!b64String.Contains("QUUUUCCiiigAooooA")) return $"data:image/png;base64,{b64String}";
        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(true);
        }

        return $"data:image/png;base64,{b64String}";
    }
}
