@using Blazorise.Localization

<Bar @bind-Visible="@topbarVisible" Breakpoint="Breakpoint.Desktop" Background="Background.Primary">
    <BarBrand>
        <BarItem>
            <BarLink To="">
                <img src="/brand-logo.png" style="width:32px; height: 32px" />
                AStar Web UI
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        <BarIcon IconName="IconName.Image" TextColor="TextColor.Success" />
                        Images
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/simple-form"><span class="oi oi-person" aria-hidden="true" style="color: green;"> Images</span></BarDropdownItem>
                        <BarDropdownDivider />
                        <BarDropdownItem To="/simple-datagrid"><span class="oi oi-people" aria-hidden="true" style="color: green;"> Duplicates</span></BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem TextColor="TextColor.Info">
                <BarLink To="/">
                    <span class="oi oi-random" aria-hidden="true" style="color: blue;"> Random Images</span>
                </BarLink>
            </BarItem>
            <BarItem>
                <BarLink To="/">
                    <span class="oi oi-globe" aria-hidden="true" style="color: orange;"> Scrape</span>
                </BarLink>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        <span class="oi oi-folder" aria-hidden="true" style="color: purple;"> Rename</span>
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/apps/todo">
                            <span class="oi oi-folder" aria-hidden="true" style="color: purple;"> Directory Rename</span>
                        </BarDropdownItem>
                    <BarDropdownDivider />
                        <BarDropdownItem To="/apps/todo">
                            <span class="oi oi-file" aria-hidden="true" style="color: purple;"> File Rename</span>
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
        </BarStart>
        <BarEnd>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        <BarIcon IconName="IconName.Smartphone" />
                        Admin
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/apps/todo">
                            Tag Admin
                        </BarDropdownItem>
                    <BarDropdownDivider />
                        <BarDropdownItem To="/apps/todo">
                            Tag Admin 2
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem>
                <Button Clicked="@(()=>OnThemeColorChanged())" Color="Color.Success">Change theme</Button>
            </BarItem>
            <BarItem>
                <Button Clicked="@(()=>OnThemeColorReset())" Color="Color.Success">Reset theme</Button>
            </BarItem>
        </BarEnd>
    </BarMenu>
</Bar>

@code {

    Task SelectCulture(string name)
    {
        LocalizationService!.ChangeLanguage(name);

        return Task.CompletedTask;
    }

    private bool topbarVisible = false;

    Task OnLayoutTypeChecked(string layoutType)
    {
        LayoutType = layoutType;

        return LayoutTypeChanged.InvokeAsync(layoutType);
    }

    [Parameter] public EventCallback<bool> ThemeEnabledChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeGradientChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeRoundedChanged { get; set; }

    [Parameter] public EventCallback<string> ThemeColorChanged { get; set; }

    [Parameter] public string? LayoutType { get; set; }

    [Parameter] public EventCallback<string> LayoutTypeChanged { get; set; }

    [Inject] protected ITextLocalizerService? LocalizationService { get; set; }

    [CascadingParameter] protected Theme? Theme { get; set; }
    Task OnThemeColorChanged()
    {
        if(Theme is not null)
        {
            if(Theme.ColorOptions.Primary == "#d16f9e")
            {
                Theme.BackgroundOptions.Primary = "#e87c45";
                Theme.ColorOptions.Primary = "#e87c45";
            }
            else
            {
                Theme.BackgroundOptions.Primary = "#d16f9e";
                Theme.ColorOptions.Primary = "#d16f9e";
            }
        }

        Theme?.ThemeHasChanged();

        return Task.CompletedTask;
    }

    Task OnThemeColorReset()
    {
        if(Theme is not null)
        {
            Theme.BackgroundOptions.Primary = "#000000";
            Theme.ColorOptions.Primary = "#FFFFFF";
        }

        Theme?.ThemeHasChanged();

        return Task.CompletedTask;
    }
}