@page "/search"
@using AStar.Web.UI.FilesApi
@using AStar.Web.UI.Shared
<LoadingIndicator @ref="loadingIndicator">
<Accordion>
    <AccordionItem @bind-Visible="@accordionItem1Visible" Background="Background.Primary">
        <AccordionHeader Background="Background.Primary">
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>Search</AccordionToggle>
            </Heading>
        </AccordionHeader>
        <AccordionBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                    <Card Margin="Margin.Is4.FromBottom">
                        <CardBody Background="Background.Primary">
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Search Folder</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                            <TextEdit Placeholder="Please specify the starting folder" @bind-text="@startingFolder" />
                                </FieldBody>
                            </Field>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Items Per Page</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                    <NumericPicker @bind-Value="@itemsPerPage" ModifyValueOnWheel WheelOn="NumericWheelOn.Hover" Step="10" Min="10" Max="50" />
                                </FieldBody>
                            </Field>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Search Type</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                    <Select @bind-SelectedValue="@searchType">
                                        <SelectItem Value="1">Images</SelectItem>
                                        <SelectItem Value="2">All</SelectItem>
                                    </Select>
                                        </FieldBody>
                                    </Field>
                                    <Field Horizontal>
                                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Sort Order</FieldLabel>
                                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                            <Select @bind-SelectedValue="@sortOrder">
                                        <SelectItem Value="1">Size Descending</SelectItem>
                                        <SelectItem Value="2">Size Ascending</SelectItem>
                                        <SelectItem Value="3">Name Descending</SelectItem>
                                        <SelectItem Value="4">Name Ascending</SelectItem>
                                            </Select>
                                        </FieldBody>
                                    </Field>
                                <Field Horizontal JustifyContent="JustifyContent.End">
                                    <FieldBody ColumnSize="ColumnSize.Is9.Is3.WithOffset">
                                        <Button Color="Color.Success" Clicked="SubmitHorizontalForm">Submit</Button>
                                    </FieldBody>
                                </Field>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </AccordionBody>
    </AccordionItem>
    <AccordionItem @bind-Visible="@accordionItem3Visible" Background="Background.Primary">
        <AccordionHeader>
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>Search Results</AccordionToggle>
            </Heading>
        </AccordionHeader>
        <AccordionBody>
                <Pagination Background="Background.Primary">
                <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
                        <PaginationLink Background="Background.Success">
                        <span aria-hidden="true">«</span>
                    </PaginationLink>
                </PaginationItem>
                @{
                    if(pages>0)
                    {
                    for(var i = 1; i <= initialPages; i++)
                    {
                        var pageNumberAsString = i.ToString();
                        <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                                    <PaginationLink Page="@pageNumberAsString" Clicked="SetActive" Background="Background.Success">
                                @pageNumberAsString
                            </PaginationLink>
                        </PaginationItem>
                    }

                    for(var i = finalPages; i <= pages; i++)
                    {
                        var pageNumberAsString = i.ToString();
                        <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                                    <PaginationLink Page="@pageNumberAsString" Clicked="SetActive" Background="Background.Success">
                                @pageNumberAsString
                            </PaginationLink>
                        </PaginationItem>
                    }
                    }
                }
                <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
                        <PaginationLink Background="Background.Success">
                        <span aria-hidden="true">»</span>
                    </PaginationLink>
                </PaginationItem>
            </Pagination>

        </AccordionBody>
    </AccordionItem>
    </Accordion>
</LoadingIndicator>

@code {
    int itemsPerPage = 20;
    int searchType;
    int sortOrder;
    int pages;
    int initialPages;
    int finalPages;
    string startingFolder = @"f:\";
    private LoadingIndicator loadingIndicator = new();

    [Inject]
    private FilesApiClient FilesApiClient { get; set; } = default!;

    [Inject]
    private ILogger<Search> Logger { get; set; } = default!;

    async Task SubmitHorizontalForm()
    {
        await loadingIndicator.Show();
        var filesCount = await FilesApiClient.GetFilesCountAsync(new SearchParameters() { SearchFolder = startingFolder, SearchType = SearchType.Images,SortOrder = SortOrder.SizeDescending });

        pages = (int)Math.Ceiling(filesCount / (decimal)itemsPerPage);
        if(pages>5)
        {
            initialPages = 5;
        }

        if(pages-5 > 0)
        {
            finalPages = pages - 5;
        }
        Logger.LogInformation("FilesApiClient fileCount: {FileCount}", filesCount);
        accordionItem1Visible = false;
        accordionItem3Visible = true;
        await loadingIndicator.Hide();
    }

    bool accordionItem1Visible = true;
    bool accordionItem3Visible = false;

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";

    private bool IsActive(string page) => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if(navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if(navigation.Equals(NEXT))
        {
            return currentPage.Equals(itemsPerPage.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if(currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if(currentPageAsInt < itemsPerPage)
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private void SetActive(string page)
                    => currentPage = page; // The re-query will happen here
}